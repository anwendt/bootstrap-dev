argo-repo-config:
  ociRepo:
    url: tsigitopsacr.azurecr.io
    username: tsigitopsreadtoken
    email: ""

argo-git-repo:
  externalClusterConfig: false
  clusterconfigImage: tsigitopsacr.azurecr.io/tsigitops/kubectl:v1.30.6-tsigitops1
  clusterconfigNamespace: argocd
  repositories: []

argocd-helm-deployment:
  chartConfig:
 #   repo: oci://dtmbdevops.azurecr.io/dtmbdevopscharts/argo-cd
    version: 8.0.14
    namespace: argocd
    chart: oci://ghcr.io/argoproj/argo-helm/argo-cd
    valuesContent: |-
      configs:
        cm:
          helm.valuesFileSchemes: secrets+gpg-import, secrets+gpg-import-kubernetes, secrets+age-import,
            secrets+age-import-kubernetes, secrets,secrets+literal, https
        params:
          server.insecure: true
      controller:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
        replicas: 1
        resources: {}
      redis:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
      applicationSet:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
      dex:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
        image:
          repository: ghcr.io/dexidp/dex
      global:
        addPrometheusAnnotations: true
        image:
          repository: quay.io/argoproj/argocd
        logging:
          # -- Set the global logging format. Either: `text` or `json`
          format: text
          # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
          level: error
      redis-ha:
        enabled: true
        image:
          repository: ecr-public.aws.com/docker/library/redis
          exporter:
            image:
              repository: ghcr.io/oliver006/redis_exporter
        haproxy:
          metrics:
            enabled: true
            serviceMonitor:
              enabled: true
          image:
            repository: ecr-public.aws.com/docker/library/haproxy
          hardAntiAffinity: false
      repoServer:
        autoscaling:
          enabled: false
          minReplicas: 2
        env:
        - name: HELM_PLUGINS
          value: /custom-tools/helm-plugins/
        - name: HELM_SECRETS_CURL_PATH
          value: /custom-tools/curl
        - name: HELM_SECRETS_SOPS_PATH
          value: /custom-tools/sops
        - name: HELM_SECRETS_VALS_PATH
          value: /custom-tools/vals
        - name: HELM_SECRETS_KUBECTL_PATH
          value: /custom-tools/kubectl
        - name: HELM_SECRETS_BACKEND
          value: sops
        - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
          value: "false"
        - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
          value: "true"
        - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
          value: "false"
        - name: HELM_SECRETS_WRAPPER_ENABLED
          value: "true"
        - name: HELM_SECRETS_DECRYPT_SECRETS_IN_TMP_DIR
          value: "true"
        - name: HELM_SECRETS_HELM_PATH
          value: /usr/local/bin/helm
        - name: SOPS_AGE_KEY_FILE
          value: /helm-secrets-private-keys/key.txt
        - name: HELM_SECRETS_IGNORE_MISSING_VALUES
          value: "true"
        initContainers:
        - args:
          - |
            cp /usr/local/bin/sops /custom-tools/ && \
            cp /usr/local/bin/argocd-vault-plugin /custom-tools/ && \
            cp /usr/local/bin/kubectl /custom-tools/ && \
            cp /usr/local/bin/helm /custom-tools/ && \
            cp /usr/local/bin/vals /custom-tools/ && \
            cp /usr/local/bin/age/age /custom-tools/ && \
            cp /usr/local/bin/age/age-keygen /custom-tools/ && \
            cp /usr/local/bin/yq /custom-tools/ && \
            cp /usr/bin/curl /custom-tools/ && \
            mkdir -p /custom-tools/helm-plugins/ && \
            cp -r /opt/custom-tools/helm-plugins/helm-secrets /custom-tools/helm-plugins/ && \
            echo "Tools copied successfully"
          command:
          - sh
          - -c
          image: awendt/argocdinit:v0.2.0
          name: download-tools
          volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
        volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
        - mountPath: /usr/local/sbin/helm
          name: custom-tools
          subPath: helm
        - mountPath: /helm-secrets-private-keys/
          name: helm-secrets-private-keys
        volumes:
        - emptyDir: {}
          name: custom-tools
        - name: helm-secrets-private-keys
          secret:
            secretName: helm-secrets-private-keys
      server:
        autoscaling:
          enabled: false
          minReplicas: 2
        config:
          configManagementPlugins: |2

            - name: sops
              init:
                command: ["/bin/sh", "-c"]
                args: ["if [ -f 'secrets.enc' ]; then echo '---' > secrets.yaml && sops -d --input-type yaml --output-type yaml secrets.enc >> secrets.yaml; fi"]
              generate:
                command: ["/bin/sh", "-c"]
                args: ["cat *.yaml | yq"]


            - name: argocd-vault-plugin
              generate:
                command: ["argocd-vault-plugin"]
                args: ["generate", "./"]
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
        extensions:
          image:
            repository: "quay.io/argoprojlabs/argocd-extension-installer"
      notifications:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true